spring:
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        default_batch_fetch_size: 1000 #최적화 옵션
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: none
      #  create	기존테이블을 삭제하고 다시 생성
      #  create-drop 기존테이블을 삭제하고 다시생성. 종료 시점에 테이블삭제
      #  update	변경된 스키마 적용 (운영 DB 에서 사용X)
      #  validate Entity 와 테이블이 정상 매핑 되었는지 확인
      #  none 기존테이블을 더 이상 건드리지 않음.
    open-in-view: true

  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false


# 개발 단계에서 로깅 레벨
#logging:
#  level:
#    root: INFO  # 전체 로그를 INFO, DEBUG, WARN 수준으로 설정
#    org.springframework.security: TRACE
#    org.springframework.web: INFO
#    com.sparta.gaeppa: DEBUG
#    # 필요 시 특정 SQL 로그를 추가하거나 Hibernate SQL 로그를 설정
#    hibernate.SQL: INFO
#    org.springframework.boot.autoconfigure: INFO
#    org.springframework.beans.factory.support.DefaultListableBeanFactory: WARN
#    # 아직 Thymeleaf 를 사용하지 않기 때문에, 경고 메세지를 제거합니다.
#    spring.thymeleaf.check-template-location: false
#    org.hibernate.type: INFO

# 배포 단계에서 로깅 레벨
logging:
  level:
    root: INFO  # 전체 로그를 INFO 수준으로 설정
    org.springframework: WARN  # 스프링 프레임워크 로그를 WARN 이상으로 설정하여 주요 문제만 로깅
    com.your.package: INFO  # 사용자 패키지 로그를 INFO 수준으로 설정
    # 필요시 SQL 에러 로그만 남길 수 있음
    hibernate.SQL: ERROR
  file:
    path: /var/log/your-application/ # 운영 서버의 로그 파일 경로 설정
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n" # 콘솔 로그 출력 패턴
    file: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"    # 파일 로그 출력 패턴